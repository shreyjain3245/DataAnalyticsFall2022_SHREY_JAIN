v2
df <- data.frame(col.names.1 = v1, col.name.2 = v2)
df
write.csv(df, file = "saved_df1.csv")
df2 <- read.csv("saved_df1.csv")
df2
str(RPI_Weather_Week)
# Creating a datagrame
# Example: RPI Weather dataframe.
days <- c('Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun') # days
temp <- c(28, 30.5, 32, 31.2, 29.3, 27.9, 26.4)
snowed <- c('T', 'T', 'F', 'F', 'T', 'T', 'F')
help(data.frame)
RPI_Weather_Week <- data.frame(days, temp, snowed)
RPI_Weather_Week
head(RPI_Weather_Week)
str(RPI_Weather_Week)
summary(RPI_Weather_Week)
RPI_Weather_Week[1,]
RPI_Weather_Week[,1]
RPI_Weather_Week[,'snowed']
RPI_Weather_Week[,'days']
RPI_Weather_Week[,'temp']
RPI_Weather_Week[1:5, c("days", "temp")]
RPI_Weather_Week$temp
subset(RPI_Weather_Week, subset.snowed=TRUE)
sorted.snowed <- order(RPI_Weather_Week['snowed'])
sorted.snowed
RPI_Weather_Week[sorted.snowed,]
dec.snow <- order(-RPI_Weather_Week$temp)
dec.snow
empty.DataFrame = data.frame()
v1 <- 1:10
v1
letters
v2 <- letters[1:10]
df <- data.frame(col.names.1 = v1, col.name.2 = v2)
df
# R Basics with Examples.
## Data Types
# numerics,character and logical
temperature <- 4.5 # degrees in Fahrenheit
class(temperature)
RPI <- "Rensselaer Polytechnic Institue"
class(RPI)
Rpi <- 3.14159265359
class(Rpi)
isSnowing <- FALSE
class(isSnowing)
R <- FALSE
class(R)
## Vectors
num_vec <- c(1,3,5,99)
class(num_vec)
cha_vec <- c("R","P","I")
class(cha_vec)
boolean_vec <- c(T,FALSE,F) # T = TRUE, you can simply use T for TURE
class(boolean_vec)
# mixed variable types
vec_mixed <- c("RPI", 1824, 3.14)
vec_mixed
class(vec_mixed) # Note: the 1824 and 3.14 are converted to characters
vec_mixed_boolean <- c(TRUE,"RPI", 1824, 3.14)
vec_mixed_boolean
class(vec_mixed_boolean)
vec_numeric_boolean <- c(TRUE,1824,3.14)
vec_numeric_boolean
class(vec_numeric_boolean)
temperature <- c(80,81.3,83,84.2,82.5)
names(temperature) <- c("Mon","Tue","Web","Thur","Fri")
temperature
# You can do the same thing by:
Week_Days <-c("Mon","Tue","Web","Thur","Fri")
names(temperature) <- Week_Days
temperature
# Indexing Vectors
# Note: indexing in R starts with 1, in python programming language indexing start with 0.
vec1 <- c('R','P','I')
vec2 <- c(1,8,2,4)
vec1[1]
vec2[2]
# Matrix
m <- c(1:10)
m
matrix(m,nrow = 2)
matrix(1:12,byrow = FALSE,nrow = 4)
matrix(1:12,byrow = TRUE,nrow = 4)
# stock prices
goog <- c(560,564,563,562,561)
msft <- c(480,482,484,483,482)
stocks <- c(goog,msft)
stocks
print(stocks)
stock.matrix <- matrix(stocks,byrow = T,nrow = 2)
stock.matrix
days <- c("Mon","Tue","Wed","Thur","Fri")
st.names <- c("goog","msft")
colnames(stock.matrix) <- days
rownames(stock.matrix) <- st.names
print(stock.matrix)
mat <- matrix(1:25,byrow = T, nrow = 5)
mat
mat*2
mat/2
mat^2
1/mat
mat > 15
mat[mat > 15]
mat + mat
mat / mat
colSums(stock.matrix)
rowSums(stock.matrix)
rowMeans(stock.matrix)
# Bind the Columns
FB <- c(223,224,225,223.5,222)
tech.stocks <- rbind(stock.matrix,FB) # Row bind
tech.stocks
avg <- rowMeans(tech.stocks)
avg
tech.stocks <- cbind(tech.stocks,avg) # Column bind
tech.stocks
mat <- matrix(1:50,byrow = T, nrow = 5)
mat
mat[1,] # first row with all the columns
mat[,1] # first column and all the rows
mat[1:3,]
mat[1:2,1:3]
mat[,9:10]
mat[2:3,5:6]
# Factor and Catergorical variables
animals <- c('dog','cat','dog','cat','cat')
id <- c(1,2,3,4,5)
temps <- c('cold','med','hot','hot','hot','cold','med')
temps
fact.temps <- factor(temps, ordered = TRUE, levels = c('cold','med','hot'))
fact.temps
summary(fact.temps)
summary(temps)
undergrads <-c('Freshman','Junior', 'Sophomore','Junior','Senior','Sophomore','Junior','Freshman','Senior','Junior')
undergrads
factor.undergrads <-factor(undergrads,ordered = TRUE,levels = c('Freshman','Sophomore','Junior','Senior'))
factor.undergrads
summary(factor.undergrads)
# Exercise
A <- c(1,2,3)
B <- c(4,5,6)
A <- rbind(A,B)
A
mat <- matrix(1:9, nrow = 3)
mat
is.matrix(mat)
mat2 <- matrix(1:25, byrow = T, nrow = 5)
mat2
mat2[2:3,2:3]
mat2[4:5,4:5]
sum(mat2)
help("runif")
u <- runif(20)
u
runif(matrix(20))
matrix(runif(20),nrow = 4)
write.csv(df, file = "saved_df1.csv")
df2 <- read.csv("saved_df1.csv")
df2
EPI_data <- read.csv(file.choose(), skip=1,header = TRUE)
View(EPI_data)
attach(EPI_data) 	# sets the ‘default’ object
fix(EPI_data)
EPI 			# prints out values EPI_data$EPI
clear
exit
cls
hist(EPI, seq(30., 95., 1.0), prob = TRUE)
EPI_data <- read.csv(file.choose(), skip = 1, header = TRUE)
View(EPI_data)
attach(EPI_data)
fix(EPI_data)
EPI
EPI_data <- read.csv(file.choose(), skip = 1, header = TRUE)
View(EPI_data)
attach(EPI_data)
fix(EPI_data)
EPI
EPI
EPI_data <- read.csv("2010EPI_data.csv", skip = 1, header = TRUE)
View(EPI_data)
attach(EPI_data)
fix(EPI_data)
EPI
EPI <- EPI[!is.na(EPI)]
EPI
DALY <- DALY[!is.na(DALY)]
# Generate central tendency values & boxplots
summary(EPI)
summary(DALY)
boxplot(EPI)
boxplot(DALY)
# Generate central tendency values & boxplots
summary(NOX_pt)
# Generate central tendency values & boxplots
NOX_pt <- NOX_pt[!is.na(NOX_pt)]
summary(NOX_pt)
summary(SO2_pt)
summary(SO2_pt)
boxplot(OZONE_pt)
boxplot(WQI_pt)
SO2_pt <- SO2_pt[!is.na(SO2_pt)]
summary(NOX_pt)
summary(SO2_pt)
boxplot(OZONE_pt)
summary(OZONE_pt)
OZONE_pt <- OZONE_pt[!is.na(OZONE_pt)]
boxplot(OZONE_pt)
boxplot(WQI_pt)
WQI_pt <- WQI_pt[!is.na(WQI_pt)]
boxplot(WQI_pt)
# read data in
library(class)
aba<-read.csv(file.choose())
naba<-dim(aba)[1]
summary(aba$Sex)
View(aba)
is.na.data.frame(aba)
is.na.data.frame(aba$Sex)
is.na(aba$Sex)
!is.na(aba$Sex)
aba$Sex <- abe$Sex[!is.na(aba$Sex)]
aba$Sex <- aba$Sex[!is.na(aba$Sex)]
aba$Sex
aba$Sex
aba<-read.csv(file.choose())
naba<-dim(aba)[1]
aba$Sex
aba$Sex <- aba$Sex[!is.na(aba$Sex)]
aba$Sex
aba$Rings
aba$Rings
aba$Rings <- aba$Rings[!is.na(aba$Rings)]
aba$Rings
#90% to train
sampling.rate=0.9
#remainder to test
num.test.set.labels=naba*(1.-sampling.rate)
#construct a random set of training indices (training)
training <-sample(1:naba,sampling.rate*naba, replace=FALSE)
#build the training set (train)
train<-subset(aba[training,],select=c("Sex","Length","Diameter","Height","Whole.weight","Shucked.weight","Viscera.weight","Shell.weight"))
#construct the remaining test indices (testing)
testing<-setdiff(1:naba,training)
#define the test set
test<-subset(aba[testing,],select=c("Sex","Length","Diameter","Height","Whole.weight","Shucked.weight","Viscera.weight","Shell.weight"))
#construct labels for another variable (Rings) in the training set
crings<-aba$Rings[training]
#construct true labels the other variable in the test set
true.labels<-aba$Rings[testing]
#run the classifier, can change k
classif<-knn(train,test,crings,k=5)
aba
aba$Sex <- unclass(aba$Sex)
aba
aba$Sex <- unclass(aba$Sex)
aba$Sex
aba$Sex <- unclass(aba$Sex)
aba$Sex
aba <- unclass(aba$Sex)
aba
aba <- unclass(aba$Sex)
fix(aba)
View(aba)
# read data in
library(class)
aba<-read.csv(file.choose())
naba<-dim(aba)[1]
View(aba)
attach(aba)
fix(aba)
aba <- unclass(aba$Sex)
aba
aba[]<−as.numeric(factor(as.matrix(aba)))
aba[]<−as.numeric(factor(as.matrix(aba)))
# read data in
library(class)
aba<-read.csv(file.choose())
naba<-dim(aba)[1]
View(aba)
attach(aba)
fix(aba)
aba[]<−as.numeric(factor(as.matrix(aba)))
aba[] <− as.numeric(factor(as.matrix(aba)))
aba <− as.numeric(factor(as.matrix(aba)))
aba <- as.numeric(factor(as.matrix(aba)))
aba$Sex <- unclass(aba$Sex)
aba
#90% to train
sampling.rate=0.9
#remainder to test
num.test.set.labels=naba*(1.-sampling.rate)
#construct a random set of training indices (training)
training <-sample(1:naba,sampling.rate*naba, replace=FALSE)
#build the training set (train)
train<-subset(aba[training,],select=c("Sex","Length","Diameter","Height","Whole.weight","Shucked.weight","Viscera.weight","Shell.weight"))
#construct the remaining test indices (testing)
testing<-setdiff(1:naba,training)
#define the test set
test<-subset(aba[testing,],select=c("Sex","Length","Diameter","Height","Whole.weight","Shucked.weight","Viscera.weight","Shell.weight"))
#construct labels for another variable (Rings) in the training set
crings<-aba$Rings[training]
#construct true labels the other variable in the test set
true.labels<-aba$Rings[testing]
#run the classifier, can change k
classif<-knn(train,test,crings,k=5)
#view the classifier
classif
#looks at attributes
attributes(.Last.value)
#now do bayes.
View(Auto)
# Importing required libraries
library(ggplot2)
library(rpart)
library(rpart.plot)
library(maptree)
library(dplyr)
# Set directory and read sales Sales data
setwd("C:/Users/Shrey Jain/Documents/Study/Data Analytics/DataAnalyticsFall2022_SHREY_JAIN/Lab/DataAnalytics_A4_SHREY_JAIN/")
sales <- read.csv("nyc_Citywide_Annualized_Calendar_Sales_Update.csv")
View(sales)
# Data Pre-processing
# sales <- sales[sales$ZIP.CODE > 11200 & sales$ZIP.CODE < 11257,] - Identify unique values of BOROUGH - Used zip codes as mentioned on the web
# unique(sales$BOROUGH) - It seems BOROUGH = 3 also means BROOKLYN
sales <- sales[sales$BOROUGH == "BROOKLYN" | sales$BOROUGH == "3",]
head(sales)
# Remove NAs
sales <- sales[sales$GROSS.SQUARE.FEET > 0 & !is.na(sales$GROSS.SQUARE.FEET),]
sales <- sales[sales$LAND.SQUARE.FEET > 0 & !is.na(sales$LAND.SQUARE.FEET),]
sales <- sales[sales$SALE.PRICE > 0 & !is.na(sales$SALE.PRICE),]
# Removing commas
sales$GROSS.SQUARE.FEET <- gsub(",","",as.character(sales$GROSS.SQUARE.FEET))
sales$LAND.SQUARE.FEET <- gsub(",","",as.character(sales$LAND.SQUARE.FEET))
# Converting value as numeric
sales$GROSS.SQUARE.FEET <- as.numeric(sales$GROSS.SQUARE.FEET)
sales$LAND.SQUARE.FEET <- as.numeric(sales$LAND.SQUARE.FEET)
# Question 1 (A)
# Exploratory Data Analysis (Checking Five nums and plotting histogram)
summary(sales$SALE.PRICE)
hist(sales$SALE.PRICE, xlim=c(0, 2000000), breaks=10000, main="Sale Price Histogram", xlab="Sale Price", col="blue")
summary(sales$LAND.SQUARE.FEET)
hist(sales$LAND.SQUARE.FEET, xlim=c(0, 10000), breaks=10000, main="Land Sq Ft Histogram", xlab="Land Sq Ft", col="green")
summary(sales$GROSS.SQUARE.FEET)
hist(sales$GROSS.SQUARE.FEET, xlim=c(0, 10000), breaks=10000, main="Gross Sq Ft Histogram", xlab="Gross Sq Ft", col="red")
summary(sales$GROSS.SQUARE.FEET)
# Question 1 (A)
# Exploratory Data Analysis (Checking Five nums and plotting histogram)
summary(sales$SALE.PRICE)
summary(sales$LAND.SQUARE.FEET)
summary(sales$GROSS.SQUARE.FEET)
# Question 1 (B)
#IQR
IQR(sales$SALE.PRICE)
Tmin = fivenum(sales$SALE.PRICE)[2] - (1.5*IQR(sales$SALE.PRICE))
Tmax = fivenum(sales$SALE.PRICE)[4] + (1.5*IQR(sales$SALE.PRICE))
# Find outlier
length(sales$SALE.PRICE[which(sales$SALE.PRICE < Tmin | sales$SALE.PRICE > Tmax)])
# Cooks Distance
cooks_outliers <- data.frame(sales$SALE.PRICE, sales$LAND.SQUARE.FEET, sales$GROSS.SQUARE.FEET)
colnames(cooks_outliers) <- c("Sale_Price", "Land_Sq_Ft", "Gross_Sq_Ft")
cooks_outliers <- na.omit(cooks_outliers)
model1 <- lm(Sale_Price~Land_Sq_Ft+Gross_Sq_Ft, data=cooks_outliers)
summary(model1)
plot(model1, pch=9, col="blue", which=c(4))
cooksD <- cooks.distance(model1)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
length(names_of_influential)
outliers <- cooks_outliers[names_of_influential,]
data_Without_outliers <- cooks_outliers %>% anti_join(outliers)
model2 <- lm(Sale_Price~Land_Sq_Ft+Gross_Sq_Ft, data=data_Without_outliers)
summary(model1)
plot(model2, pch=9, col="green", which=c(4))
# Question 1 (B)
#IQR
IQR(sales$SALE.PRICE)
Tmin = fivenum(sales$SALE.PRICE)[2] - (1.5*IQR(sales$SALE.PRICE))
Tmax = fivenum(sales$SALE.PRICE)[4] + (1.5*IQR(sales$SALE.PRICE))
# Find outlier
length(sales$SALE.PRICE[which(sales$SALE.PRICE < Tmin | sales$SALE.PRICE > Tmax)])
# Question 1 (B)
#IQR
fivenum(sales$SALE.PRICE)
IQR(sales$SALE.PRICE)
total_outliers
# Cooks Distance
cooks_outliers <- data.frame(sales$SALE.PRICE, sales$LAND.SQUARE.FEET, sales$GROSS.SQUARE.FEET)
colnames(cooks_outliers) <- c("Sale_Price", "Land_Sq_Ft", "Gross_Sq_Ft")
cooks_outliers <- na.omit(cooks_outliers)
model1 <- lm(Sale_Price~Land_Sq_Ft+Gross_Sq_Ft, data=cooks_outliers)
summary(model1)
cooksD <- cooks.distance(model1)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
length(names_of_influential)
outliers <- cooks_outliers[names_of_influential,]
data_Without_outliers <- cooks_outliers %>% anti_join(outliers)
model2 <- lm(Sale_Price~Land_Sq_Ft+Gross_Sq_Ft, data=data_Without_outliers)
summary(model1)
cooksD2 <- cooks.distance(model2)
total_outliers <- length(cooksD) - length(cooksD2)
total_outliers
total_outliers
plot(model2, pch=9, col="green", which=c(4))
# Question 1 (C) Multivariate Regression
#First sample
training_dataset <- sample(dim(data_Without_outliers)[1], 1800)
model3_linear <- lm(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales, subset = training_dataset)
summary(model3_linear)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=data_Without_outliers)
# Question 1 (C) Multivariate Regression
#First sample
training_dataset <- sample(dim(sales)[1], 1800)
model3_linear <- lm(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales, subset = training_dataset)
summary(model3_linear)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
abline(model3_linear, col="green")
model3_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales, subset = training_dataset)
summary(model3_quad)
abline(model3_quad, col="blue")
model3_cube <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,3,raw=TRUE) + poly(LAND.SQUARE.FEET,3,raw=TRUE), data = sales, subset = training_dataset)
summary(model3_cube)
abline(model3_cube, col="red")
# Second sample
training_dataset2 <- sample(dim(sales)[1], 1800)
model4_linear <- lm(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales, subset = training_dataset2)
summary(model4_linear)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
# Second sample
training_dataset2 <- sample(dim(sales)[1], 1800)
model4_linear <- lm(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales, subset = training_dataset2)
summary(model4_linear)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
abline(model4_linear, col="green")
model4_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales, subset = training_dataset2)
summary(model4_quad)
abline(model4_quad, col="blue")
model4_cube <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,3,raw=TRUE) + poly(LAND.SQUARE.FEET,3,raw=TRUE), data = sales, subset = training_dataset2)
summary(model4_cube)
abline(model4_cube, col="red")
# Third sample
training_dataset3 <- sample(dim(sales)[1], 1800)
model5_linear <- lm(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales, subset = training_dataset3)
summary(model5_linear)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
abline(model5_linear, col="green")
model5_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales, subset = training_dataset3)
summary(model5_quad)
abline(model5_quad, col="blue")
model5_cube <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,3,raw=TRUE) + poly(LAND.SQUARE.FEET,3,raw=TRUE), data = sales, subset = training_dataset3)
summary(model5_cube)
abline(model5_cube, col="red")
# Question 1 (D) # Decision tree
decision_tree_data <- data.frame(sales$SALE.PRICE, sales$LAND.SQUARE.FEET)
colnames(decision_tree_data) <- c("Sale_Price", "Land_Sq_Ft")
decision_tree_data <- na.omit(decision_tree_data)
# Data split into training and testing
help(sample)
samples <- sample(150, 120)
train <- decision_tree_data[samples, ]
test <- decision_tree_data[-samples, ]
dtree <- rpart(Sale_Price~., train, method="class")
rpart.plot(dtree, box.palette = "grey")
prp(dtree, faclen = 2)
draw.tree(dtree,cex=1)
# Question 2 (A)
y_pred <- predict(dtree, test, type="class")
confMat <- table(test$Sale_Price, y_pred)
accuracy <- sum(diag(confMat))/sum(confMat)
accuracy
rpart.plot(dtree)
prp(dtree, faclen = 2)
draw.tree(dtree,cex=1)
# Question 2 (A)
model_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales)
summary(model_quad)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
summary(model_quad)
# Question 2 (A)
model_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales)
summary(model_quad)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
abline(model_quad, col="blue")
# Question 2 (A)
model_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = sales)
summary(model_quad)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=sales)
abline(model_quad, col="blue")
model_quad <- lm(SALE.PRICE~poly(GROSS.SQUARE.FEET,2,raw=TRUE) + poly(LAND.SQUARE.FEET,2,raw=TRUE), data = data_Without_outliers)
head(data_Without_outliers)
model_quad <- lm(Sale_Price~poly(Gross_sq_Ft,2,raw=TRUE) + poly(Land_sq_Ft,2,raw=TRUE), data = data_Without_outliers)
model_quad <- lm(Sale_Price~poly(Gross_sq_Ft,2,raw=TRUE) + poly(Land_Sq_Ft,2,raw=TRUE), data = data_Without_outliers)
model_quad <- lm(Sale_Price~poly(Gross_Sq_Ft,2,raw=TRUE) + poly(Land_Sq_Ft,2,raw=TRUE), data = data_Without_outliers)
summary(model_quad)
abline(model_quad, col="green")
model_quad_2 <- lm(Sale_Price~poly(Gross_Sq_Ft,2,raw=TRUE) + poly(Land_Sq_Ft,2,raw=TRUE), data = data_Without_outliers)
head(data_Without_outliers)
model_quad_2 <- lm(Sale_Price~poly(Gross_Sq_Ft,2,raw=TRUE) + poly(Land_Sq_Ft,2,raw=TRUE), data = data_Without_outliers)
summary(model_quad_2)
plot(SALE.PRICE~GROSS.SQUARE.FEET+LAND.SQUARE.FEET, data=data_Without_outliers)
plot(Sale_Price~Gross_Sq_Ft+Land_Sq_Ft, data=data_Without_outliers)
abline(model_quad_2, col="green")
# Question 2 (B)
summary(model_quad_2)
